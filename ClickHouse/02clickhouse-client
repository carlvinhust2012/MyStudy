
// ClickHouse/programs/client/clickhouse-client.cpp
int main(int argc_, char ** argv_) { return mainEntryClickHouseClient(argc_, argv_); }

// ClickHouse/programs/client/Client.cpp
int mainEntryClickHouseClient(int argc, char ** argv)
{
    try
    {
        // 这里其实是 namespace DB中定义的实例
        DB::Client client;
        client.init(argc, argv);
        // 这里其实是 namespace DB中定义的实例，执行run方法, Poco::Util::Application::run
        return client.run();
    }
    catch (const DB::Exception & e)
    {
        std::cerr << DB::getExceptionMessage(e, false) << std::endl;
        return 1;
    }
    catch (const boost::program_options::error & e)
    {
        std::cerr << "Bad arguments: " << e.what() << std::endl;
        return DB::ErrorCodes::BAD_ARGUMENTS;
    }
    catch (...)
    {
        std::cerr << DB::getCurrentExceptionMessage(true) << std::endl;
        return 1;
    }
}

void ClientBase::init(int argc, char ** argv)
{
    /// Don't parse options with Poco library, we prefer neat boost::program_options.
    stopOptionsProcessing();
    readArguments(argc, argv, common_arguments, external_tables_arguments, hosts_and_ports_arguments);

    addOptions(options_description);
    parseAndCheckOptions(options_description, options, common_arguments);
    
    processOptions(options_description, options, external_tables_arguments, hosts_and_ports_arguments);
    argsToConfig(common_arguments, config(), 100);
    clearPasswordFromCommandLine(argc, argv);
}

client::init() {
    return ClientBase::init();
}

client::run() {
    return Poco::Util::Application:run();
}

void Client::initialize(Poco::Util::Application & self)
{
    Poco::Util::Application::initialize(self);

    const char * home_path_cstr = getenv("HOME");
    if (home_path_cstr)
        home_path = home_path_cstr;

    configReadClient(config(), home_path);
    // ........
}

int Client::main(const std::vector<std::string> & /*args*/)
try
{
    UseSSL use_ssl;
    MainThreadStatus::getInstance();
    setupSignalHandler();

    std::cout << std::fixed << std::setprecision(3);
    std::cerr << std::fixed << std::setprecision(3);

    registerFormats();
    registerFunctions();
    registerAggregateFunctions();

    processConfig();
    
    /// Includes delayed_interactive.
    if (is_interactive)
    {
        clearTerminal();
        showClientVersion();
    }

    connect();

    if (is_interactive && !delayed_interactive)
    {
        runInteractive();
    }
    else
    {
        connection->setDefaultDatabase(connection_parameters.default_database);

        runNonInteractive();
    }

        if (delayed_interactive)
            runInteractive();
}

namespace DB
{

// 基类 ClientBase
class Client : public ClientBase 
{
public:
    Client() = default;

    void initialize(Poco::Util::Application & self) override;

    int main(const std::vector<String> & /*args*/) override;
};
}

// ClickHouse/src/Client/ClientBase.h
namespace DB
{

// ClientBase的基类是 Poco::Util::Application
class ClientBase : public Poco::Util::Application, public IHints<2, ClientBase>  
{

public:
    using Arguments = std::vector<String>;

    ClientBase();
    ~ClientBase() override;

    void init(int argc, char ** argv);
};
}

