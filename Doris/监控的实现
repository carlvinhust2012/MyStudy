Status HttpService::start() {
    // register metrics
    {
        auto action = _pool.add(new MetricsAction(DorisMetrics::instance()->metric_registry()));
        _ev_http_server->register_handler(HttpMethod::GET, "/metrics", action);
    }
}

// 本质上是一个http服务？
class MetricsAction : public HttpHandler {
public:
    MetricsAction(MetricRegistry* metric_registry) : _metric_registry(metric_registry) {}
    virtual ~MetricsAction() {}

    void handle(HttpRequest* req) override;

private:
    MetricRegistry* _metric_registry;
};


class DorisMetrics {
public:
    IntCounter* fragment_requests_total;
    IntCounter* fragment_request_duration_us;
    IntCounter* http_requests_total;
    IntCounter* http_request_send_bytes;
    IntCounter* query_scan_bytes;
    IntCounter* query_scan_rows;
........
    // 单例模式
    static DorisMetrics* instance() {
        static DorisMetrics instance;
        return &instance;
    }
private:
    static const std::string _s_registry_name;
    static const std::string _s_hook_name;

    MetricRegistry _metric_registry;

    std::unique_ptr<SystemMetrics> _system_metrics;
    std::shared_ptr<MetricEntity> _server_metric_entity;
};
