FeServer-->FrontendServiceImpl-->masterImpl
/**
 * Doris frontend thrift server
 */
public class FeServer {
    private int port;
    private ThriftServer server; // 使用Thrift组件

    public void start() throws IOException {
        // setup frontend server
        TProcessor tprocessor = new FrontendService.Processor<FrontendService.Iface>(
                new FrontendServiceImpl(ExecuteEnv.getInstance()));
        server = new ThriftServer(port, tprocessor);
        server.start();
        LOG.info("thrift server started.");
    }
};

// Frontend service used to serve all request for this frontend through
// thrift protocol
public class FrontendServiceImpl implements FrontendService.Iface {
    public FrontendServiceImpl(ExecuteEnv exeEnv) {
        masterImpl = new MasterImpl();
        this.exeEnv = exeEnv;
    }
};

public class MasterImpl {
    public MasterImpl() {
        reportHandler.start();
    }
    public TMasterResult finishTask(TFinishTaskRequest request) {
        try {
            List<TTabletInfo> finishTabletInfos;
            switch (taskType) {
                case CREATE:
                    Preconditions.checkState(request.isSetReportVersion());
                    finishCreateReplica(task, request);
                    break;
                case PUSH:
                    checkHasTabletInfo(request);
                    Preconditions.checkState(request.isSetReportVersion());
                    finishPush(task, request);
                    break;
                case CLONE:
                    finishClone(task, request);
                    break;
                case CHECK_CONSISTENCY:
                    finishConsistencyCheck(task, request);
                    break;
                case MAKE_SNAPSHOT:
                    finishMakeSnapshot(task, request);
            }
    }
};

// 实现checkpoint
public class Checkpoint extends MasterDaemon {
    private Catalog catalog;
    private String imageDir;
    private EditLog editLog;
    public Checkpoint(EditLog editLog) {
        super("leaderCheckpointer", FeConstants.checkpoint_interval_second * 1000L);
        this.imageDir = Catalog.getServingCatalog().getImageDir();
        this.editLog = editLog;
    }
    @Override
    protected void runAfterCatalogReady() {
        doCheckpoint();
    }
};

// VERSION file contains clusterId. eg:
//      clusterId=123456
// ROLE file contains FrontendNodeType and NodeName. eg:
//      role=OBSERVER
//      name=172.0.0.1_1234_DNwid284dasdwd
public class Storage {
    public Storage(String metaDir) throws IOException {
        this.editsFileSequenceNumbers = new ArrayList<Long>();
        this.metaDir = metaDir;

        reload();
    }
    public void reload() throws IOException {
        // Read version file info
        Properties prop = new Properties();
        File versionFile = getVersionFile();
        if (versionFile.isFile()) {
            FileInputStream in = new FileInputStream(versionFile);
            prop.load(in);
            in.close();
            clusterID = Integer.parseInt(prop.getProperty(CLUSTER_ID));
            if (prop.getProperty(TOKEN) != null) {
                token = prop.getProperty(TOKEN);
            }
        }
    ........
    }
};
