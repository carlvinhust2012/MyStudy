1.为什么使用消息队列？
使用消息队列的场景有很多，比较核心的有3个：异步、解耦、削峰与流控、广播（减少接口调用和联调）。

2.消息队列有啥缺点？
（1）系统可用性降低
系统引入的外部依赖越多，越容易挂掉。本来你就是 A 系统调用 BCD 三个系统的接口就好了，人 ABCD 四个系统好好的，没啥问题，你偏加个 MQ 进来，万一 MQ 挂了咋整，MQ 一挂，整套系统崩溃的，你不就完了？
（2）系统复杂度提高
硬生生加个 MQ 进来，你怎么保证消息没有重复消费？怎么处理消息丢失的情况？怎么保证消息传递的顺序性？
（3）一致性问题
A 系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，怎么办？你这数据就不一致了。

3.Rocket MQ和Kafka MQ的对比
（1）单机吞吐量都可以达到10W级；Kafka一般应用在大数据实时计算、日志采集等场景下
（2）延迟都在ms级；
（3）Rocket MQ支持的topic可以达到几百到几千，但是吞吐量会有一定下降；Kafka MQ支持的topic从几十上升到几百，吞吐率会有大幅度下降，需要保证topic不要过多；
（4）可用性方面，都是分布式，多副本，经过参数配置，消息可以做到0丢失；

4.如何设计一个消息队列？
