1.论文学习——包含的范围很广，计算+存储+数据库
https://accelazh.github.io/
https://accelazh.github.io/tags.html#storage-ref
leveldb源码：https://github.com/balloonwj/CppGuide/tree/master/articles/leveldb%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90
阿里盘古：https://zhuanlan.zhihu.com/p/622339954
spdk的框架&&功能模块：https://www.cnblogs.com/arcing/p/14061815.html
spdk中qos机制：https://zhuanlan.zhihu.com/p/547771058
spdk的nvme层：https://hackmd.io/@Hyam/spdk_test#nvme-layer
spdk中的bdev io机制：https://rootw.github.io/2018/05/SPDK-ioanalyze/
dpdk收包流程：https://zhuanlan.zhihu.com/p/692774865
Qemu与Librbd的QoS机制比较：https://www.modb.pro/db/135610
分布式存储限速(Qos)设计：https://zhuanlan.zhihu.com/p/450656361
5种限速算法介绍：https://www.cnblogs.com/liqiangchn/p/14253924.html
nvme概念：https://www.snia.org/education/what-is-nvme-of
基于NVMe存储的高性能存储引擎：https://www.gaitpu.com/data-center/storage/high-performance-io-for-high-performance-storage-engines
raft原理简介：https://blog.csdn.net/waltonhuang/article/details/106013797?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-106013797-blog-123834901.235%5Ev43%5Econtrol&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-106013797-blog-123834901.235%5Ev43%5Econtrol&utm_relevant_index=3
raft中的JOINT-CONSENSUS：https://github.com/peterbourgon/raft/blob/master/JOINT-CONSENSUS.md
快照：https://cloud.tencent.com/developer/article/1158686
merkle tree完整性验证：https://juejin.cn/post/7040428216946950152

2.dpu && rdma相关文档
——概念性比较强，细节没有详细描述
https://cloud.tencent.com/developer/user/5060293
https://cloud.tencent.com/developer/article/2304247
rdma相关指南+论文：
https://github.com/StarryVae/RDMA-tutorial/blob/master/tutorial.md
https://github.com/StarryVae/RDMA-tutorial/blob/master/paper/pdf/FaSST-A.pdf
使用Xilinx IP核进行PCIE开发学习笔记：
https://zhuanlan.zhihu.com/p/32786076

3.ext4文件系统
https://blogs.oracle.com/linux/post/understanding-ext4-disk-layout-part-1
https://github.com/c-rainstorm/blog/blob/master/os/FileSystem-Ext4.md

4.虚拟化相关
virtio协议解读（很详细）：https://blogs.oracle.com/linux/post/introduction-to-virtio
kvm创建VM的过程：https://mp.weixin.qq.com/s?__biz=MzkwOTE2MzkyMQ==&mid=2247483715&idx=1&sn=81883f1c02ca1d8ec109011bdb27adbc&chksm=c13fadbdf64824ab184490fe0b315d11102c6af15e75186639d15fa3d686b5bef1aa64db6815&token=640500596&lang=zh_CN#rd


5.开源代码
hash表实现：https://github.com/taosdata/TDengine/blob/main/source/util/src/thash.c#L138
brpc中iobuf的实现：https://github.com/carlvinhust2012/brpc/blob/master/src/butil/iobuf.h
folly中iobuf的实现：https://github.com/facebook/folly/blob/9c4689d361c69d156d4a6245fa625b0ea2f875e7/folly/io/IOBuf.cpp#L543
nccl通信库源码分析：https://juejin.cn/post/7210604962774302776

6.性能优化相关
prometheus客户端源码：https://github.com/digitalocean/prometheus-client-c/blob/master/example/main.c
fio使用说明：
https://halysl.github.io/2020/05/12/fio%E6%B5%8B%E8%AF%95%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD/#%E4%BD%BF%E7%94%A8-fio-%E6%B5%8B%E8%AF%95%E7%A3%81%E7%9B%98-io-%E6%80%A7%E8%83%BD
perf工具: https://cloud.tencent.com/developer/article/2245316

7.开发工具
git打patch指南： https://www.cnblogs.com/ArsenalfanInECNU/p/8931377.html
