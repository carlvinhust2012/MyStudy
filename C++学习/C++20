C++20 是自 C++11 以来的一次重大更新，引入了许多新特性和改进，使得 C++ 更加强大、灵活且易于使用。以下是 C++20 相对于 C++11 的主要变化：

### 语言特性
1. **模块（Modules）**
   - C++20 引入了模块，用于替代传统的头文件机制，改善编译时间和代码组织。
   - 模块可以减少编译依赖，提高编译效率。

2. **概念（Concepts）**
   - 概念允许对模板参数进行更严格的类型约束，增强模板的类型检查。
   - 这使得模板代码更加清晰和安全。

3. **协程（Coroutines）**
   - 协程支持异步编程，简化了复杂的异步操作。
   - 它允许编写非阻塞的异步代码，而不会陷入回调地狱。

4. **三向比较操作符（Spaceship Operator）**
   - 引入了 `<=>` 操作符，用于简化比较逻辑。
   - 它可以统一处理小于、等于和大于的比较。

5. **`consteval` 和 `constinit`**
   - `consteval` 用于定义必须在编译期求值的函数。
   - `constinit` 确保变量在编译期初始化。

6. **`using` 的扩展**
   - C++20 对 `using` 进行了扩展，使其在类型别名和模板定义中更加灵活。
   - 支持在局部作用域中声明变量，结合了类型别名和 `auto` 的优势。

7. **其他改进**
   - 支持按值捕获当前对象 `[=this]`。
   - 引入了标准属性 `[[no_unique_address]]`、`[[likely]]` 和 `[[unlikely]]`。
   - 在 `constexpr` 函数中允许使用更多功能，如 `new`、`union`、`try-catch` 等。

### 标准库特性
1. **范围库（Ranges）**
   - 引入了范围和视图的概念，提供了更强大的集合操作支持。
   - 范围库使得对容器的操作更加灵活和高效。

2. **日期与时间库**
   - 扩展了 `<chrono>` 库，增加了日期类型、时区支持和日历算法。
   - 支持日期和时间的格式化和解析。

3. **`std::span`**
   - 提供了一种轻量级的连续数组视图，用于对数组进行读写访问。

4. **`std::format`**
   - 提供了类似 `printf()` 的格式化功能，支持更灵活的字符串格式化。

5. **其他改进**
   - 增加了 `barrier` 和 `latch`，用于线程同步。
   - 更多的标准库函数成为 `constexpr`。
   - 引入了 `bit_cast<>` 和更多位操作功能。

### 总结
C++20 在 C++11 的基础上进行了大量改进，引入了许多新特性，使得 C++ 更适合现代编程需求。这些特性不仅增强了语言的功能，还简化了语法，提高了代码的可读性和可维护性。
